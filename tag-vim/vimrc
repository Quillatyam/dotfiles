" Plugins{{{
call plug#begin('~/.vim/plugged')

" Color theme
" ============================================================================ "
Plug 'dracula/vim', { 'as': 'dracula' }

" Airline
" ============================================================================ "
Plug 'vim-airline/vim-airline'
let g:airline#extensions#ale#enabled = 1

" Supertab. Use <tab> for autocomplete
" ============================================================================ "
Plug 'ervandew/supertab'

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
" ============================================================================ "
Plug 'junegunn/vim-easy-align'

" Easymotion
" ============================================================================ "
Plug 'easymotion/vim-easymotion'

" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

" Enhanced netrw
" ============================================================================ "
Plug 'tpope/vim-vinegar'

" Gundo
" ============================================================================ "
Plug 'sjl/gundo.vim'

" Linter 
" ============================================================================ "
Plug 'w0rp/ale'
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_save = 1
let g:ale_lint_on_enter = 0

" Fuzzy search
" ============================================================================ "
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
" Use the correct file source, based on context
function! ContextualFZF()
    " Determine if inside a git repo
    silent exec "!git rev-parse --show-toplevel"
    redraw!

    if v:shell_error
        " Search in current directory
        call fzf#run({
          \'sink': 'e',
          \'down': '40%',
        \})
    else
        " Search in entire git repo
        call fzf#run({
          \'sink': 'e',
          \'down': '40%',
          \'source': 'git ls-tree --full-tree --name-only -r HEAD',
        \})
    endif
endfunction
" map <C-p> :call ContextualFZF()<CR>
map <C-p> :FZF<CR>

" Typescript / Javascript
" ============================================================================ "
Plug 'pangloss/vim-javascript'
Plug 'Quramy/tsuquyomi'
Plug 'leafgarland/typescript-vim'
set ballooneval
autocmd FileType typescript setlocal balloonexpr=tsuquyomi#balloonexpr()
let g:tagbar_type_typescript = {
  \ 'ctagstype': 'typescript',
  \ 'kinds': [
    \ 'c:classes',
    \ 'n:modules',
    \ 'f:functions',
    \ 'v:variables',
    \ 'v:varlambdas',
    \ 'm:members',
    \ 'i:interfaces',
    \ 'e:enums',
  \ ]
\ }


" Rust
" ============================================================================ "
Plug 'rust-lang/rust.vim'

" Golang
" ============================================================================ "
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4 

" Haskell
" ============================================================================ "
Plug 'eagletmt/ghcmod-vim'
nnoremap <Leader>ht :GhcModType<cr>
nnoremap <Leader>htc :GhcModTypeClear<cr>
autocmd FileType haskell nnoremap <buffer> <leader>? :call ale#cursor#ShowCursorDetail()<cr>

" PHP (God forbid...)
" ============================================================================ "
Plug 'arnaud-lb/vim-php-namespace'
let g:php_namespace_sort_after_insert=1

function! IPhpInsertUse()
    call PhpInsertUse()
    call feedkeys('a',  'n')
endfunction
autocmd FileType php inoremap <Leader>pnu <Esc>:call IPhpInsertUse()<CR>
autocmd FileType php noremap <Leader>pnu :call PhpInsertUse()<CR>

function! IPhpExpandClass()
    call PhpExpandClass()
    call feedkeys('a', 'n')
endfunction
autocmd FileType php inoremap <Leader>pne <Esc>:call IPhpExpandClass()<CR>
autocmd FileType php noremap <Leader>pne :call PhpExpandClass()<CR>

Plug 'phpstan/vim-phpstan'
let g:phpstan_analyse_level = 4

" Initialize plugin system
" ============================================================================ "
call plug#end()

"}}}
" Defaults {{{
syntax on                 " enable syntax highlighting
filetype indent on        " load filetype-specific indent files
filetype plugin on        " load filetype-specific plugins
set wildmenu              " visual autocomplete for command menu
set autowrite             " Write file on make, build etc.
"set lazyredraw           " redraw only when we need to
set showmatch             " highlight matching [{()}]
set expandtab             " tabs are spaces
set softtabstop=2         " number of spaces in tab when editing
set tabstop=2             " number of visual spaces per TAB
set termguicolors         " better terminal colors
set number                " Enable line numbers
set showcmd               " show command in bottom bar
set cursorline            " highlight current line
set incsearch             " search as characters are entered
set hlsearch              " highlight matches
set mouse=a               " enable mouse mode
set colorcolumn=80        " Draw 80 column limit
set tw=79                 " Textwidth 80 columns
set wrap                  " Softwrap
set number relativenumber " Relative line numbers
set omnifunc=syntaxcomplete#Complete
set completeopt=longest,menuone

"}}}
" Folds {{{
set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
set foldmethod=indent   " fold based on indent level
"}}}
" Compatibillity {{{
set nocompatible
set backspace=indent,eol,start
"}}}
" Theming & Colors {{{
color dracula
set guifont=Operator\ Mono\ Lig:h14
:set fillchars+=vert:\  "vertical split character = space
"}}} 
" Filebrowser {{{
let g:netrw_liststyle = 3           " Layout (Use 'i' to cycle layouts)
let g:netrw_banner = 0              " Don't show the banner ('I' to toggle)
let g:netrw_browse_split = 4        " Open files in hotizontal split
let g:netrw_winsize = 25            " Width of the file browser
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
"let g:netrw_list_hide = &wildignore
"augroup ProjectDrawer
"  autocmd!
"  autocmd VimEnter * :Vexplore
"augroup END
"}}}
" Mappings {{{

" leader is comma
let mapleader=","       

" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>

" space open/closes folds
nnoremap <space> za

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" move to beginning/end of line
nnoremap B ^
nnoremap E $

" $/^ doesn't do anything
nnoremap $ <nop>
nnoremap ^ <nop>

" highlight last inserted text
nnoremap gV `[v`]

" jk is escape
inoremap jk <esc>

" toggle gundo
nnoremap <leader>u :GundoToggle<CR>

" save session
nnoremap <leader>s :mksession<CR>

" }}}
" File specific augroup {{{
augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
    "autocmd BufWritePre *.php,*.py,*.js,*.txt,*.hs,*.java,*.md,*.go
    "            \:call <SID>StripTrailingWhitespaces()
    "autocmd FileType php setlocal expandtab
    "autocmd FileType php setlocal list
    "autocmd FileType php setlocal listchars=tab:+\ ,eol:-
    "autocmd FileType php setlocal formatprg=par\ -w80\ -T4
    "autocmd FileType python setlocal commentstring=#\ %s
    "autocmd BufEnter *.cls setlocal filetype=java
    "autocmd BufEnter Makefile setlocal noexpandtab
    "autocmd BufEnter *.sh setlocal tabstop=2
    "autocmd BufEnter *.sh setlocal shiftwidth=2
    "autocmd BufEnter *.sh setlocal softtabstop=2
augroup END
"}}}
" Backups {{{
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup
" }}}
" Custom functions {{{
" strips trailing whitespace at the end of files. this
" is called on buffer write in the autogroup above.
function! <SID>StripTrailingWhitespaces()
    " save last search & cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction
 " }}}
" Languages {{{
" Rust
let g:tagbar_type_rust = {
    \ 'ctagstype' : 'rust',
    \ 'kinds' : [
        \'T:types,type definitions',
        \'f:functions,function definitions',
        \'g:enum,enumeration names',
        \'s:structure names',
        \'m:modules,module names',
        \'c:consts,static constants',
        \'t:traits',
        \'i:impls,trait implementations',
    \]
    \}
" }}}
" vim:foldmethod=marker:foldlevel=0

